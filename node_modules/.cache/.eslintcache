[{"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\index.js":"1","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\reportWebVitals.js":"2","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\App.js":"3","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\SellNFT.js":"4","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\Profile.js":"5","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\NFTpage.js":"6","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\Marketplace.js":"7","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\Navbar.js":"8","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\pinata.js":"9","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\utils.js":"10","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\NFTTile.js":"11","D:\\nftMkt\\NFTMarketplaceReact2\\src\\index.js":"12","D:\\nftMkt\\NFTMarketplaceReact2\\src\\reportWebVitals.js":"13","D:\\nftMkt\\NFTMarketplaceReact2\\src\\App.js":"14","D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\Profile.js":"15","D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\NFTpage.js":"16","D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\Marketplace.js":"17","D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\SellNFT.js":"18","D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\Navbar.js":"19","D:\\nftMkt\\NFTMarketplaceReact2\\src\\pinata.js":"20","D:\\nftMkt\\NFTMarketplaceReact2\\src\\utils.js":"21","D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\NFTTile.js":"22"},{"size":1120,"mtime":1682956380549,"results":"23","hashOfConfig":"24"},{"size":375,"mtime":1682956380549,"results":"25","hashOfConfig":"24"},{"size":770,"mtime":1682956380530,"results":"26","hashOfConfig":"24"},{"size":6855,"mtime":1683034187019,"results":"27","hashOfConfig":"24"},{"size":3396,"mtime":1683034718166,"results":"28","hashOfConfig":"24"},{"size":4105,"mtime":1683034161505,"results":"29","hashOfConfig":"24"},{"size":3200,"mtime":1683034143554,"results":"30","hashOfConfig":"24"},{"size":4635,"mtime":1683060024591,"results":"31","hashOfConfig":"24"},{"size":2654,"mtime":1682956380549,"results":"32","hashOfConfig":"24"},{"size":222,"mtime":1682956380562,"results":"33","hashOfConfig":"24"},{"size":925,"mtime":1683034175115,"results":"34","hashOfConfig":"24"},{"size":1120,"mtime":1682956380549,"results":"35","hashOfConfig":"36"},{"size":375,"mtime":1682956380549,"results":"37","hashOfConfig":"36"},{"size":770,"mtime":1682956380530,"results":"38","hashOfConfig":"36"},{"size":3472,"mtime":1683454702570,"results":"39","hashOfConfig":"36"},{"size":6142,"mtime":1683493406766,"results":"40","hashOfConfig":"36"},{"size":3568,"mtime":1685253949481,"results":"41","hashOfConfig":"36"},{"size":6865,"mtime":1683473517925,"results":"42","hashOfConfig":"36"},{"size":4083,"mtime":1683453868266,"results":"43","hashOfConfig":"36"},{"size":2356,"mtime":1684476685401,"results":"44","hashOfConfig":"36"},{"size":222,"mtime":1682956380562,"results":"45","hashOfConfig":"36"},{"size":2375,"mtime":1683465432498,"results":"46","hashOfConfig":"36"},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},"4jj4ub",{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"51"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"86"},"2def3m",{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112"},{"filePath":"113","messages":"114","suppressedMessages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","suppressedMessages":"118","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"119","messages":"120","suppressedMessages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122"},"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\index.js",["123"],[],"import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route,\r\n} from \"react-router-dom\";\r\nimport SellNFT from './components/SellNFT';\r\nimport Marketplace from './components/Marketplace';\r\nimport Profile from './components/Profile';\r\nimport NFTPage from './components/NFTpage';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <BrowserRouter>\r\n      <Routes>\r\n        <Route path=\"/\" element={<Marketplace />}/>\r\n        <Route path=\"/sellNFT\" element={<SellNFT />}/> \r\n        <Route path=\"/nftPage/:tokenId\" element={<NFTPage />}/>        \r\n        <Route path=\"/profile\" element={<Profile />}/> \r\n      </Routes>\r\n    </BrowserRouter>\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n",[],"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\reportWebVitals.js",[],[],"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\App.js",["124","125","126"],[],"import './App.css';\r\nimport Navbar from './components/Navbar.js';\r\nimport Marketplace from './components/Marketplace';\r\nimport Profile from './components/Profile';\r\nimport SellNFT from './components/SellNFT';\r\nimport NFTPage from './components/NFTpage';\r\nimport ReactDOM from \"react-dom/client\";\r\nimport {\r\n  BrowserRouter,\r\n  Routes,\r\n  Route,\r\n} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"container\">\r\n        <Routes>\r\n          <Route path=\"/\" element={<Marketplace />}/>\r\n          <Route path=\"/nftPage\" element={<NFTPage />}/>        \r\n          <Route path=\"/profile\" element={<Profile />}/>\r\n          <Route path=\"/sellNFT\" element={<SellNFT />}/>             \r\n        </Routes>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\SellNFT.js",["127"],[],"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\Profile.js",["128"],[],"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\NFTpage.js",["129","130","131","132"],[],"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\Marketplace.js",[],[],"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\Navbar.js",["133","134","135","136","137","138","139","140"],[],"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\pinata.js",[],[],"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\utils.js",[],[],"D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\src\\components\\NFTTile.js",["141","142"],[],"D:\\nftMkt\\NFTMarketplaceReact2\\src\\index.js",["143"],[],[],"D:\\nftMkt\\NFTMarketplaceReact2\\src\\reportWebVitals.js",[],[],"D:\\nftMkt\\NFTMarketplaceReact2\\src\\App.js",["144","145","146"],[],"D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\Profile.js",["147"],[],"import \"./NFTpage.css\";\n\nimport Navbar from \"./Navbar\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport NFTTile from \"./NFTTile\";\n\nexport default function Profile() {\n  const [data, updateData] = useState([]);\n  const [dataFetched, updateFetched] = useState(false);\n  const [address, updateAddress] = useState(\"0x\");\n  const [totalPrice, updateTotalPrice] = useState(\"0\");\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    let sumPrice = 0;\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n\n    //create an NFT Token\n    let transaction = await contract.getMyNFTs();\n\n    /*\n     * Below function takes the metadata from tokenURI and the data returned by getMyNFTs() contract function\n     * and creates an object of information that is to be displayed\n     */\n\n    const items = await Promise.all(\n      transaction.map(async (i) => {\n        const tokenURI = await contract.tokenURI(i.tokenId);\n        let meta = await axios.get(tokenURI);\n        meta = meta.data;\n\n        let price = ethers.utils.formatUnits(i.price.toString(), \"ether\");\n        let item = {\n          price,\n          tokenId: i.tokenId.toNumber(),\n          seller: i.seller,\n          owner: i.owner,\n          image: meta.image,\n          name: meta.name,\n          description: meta.description,\n        };\n        sumPrice += Number(price);\n        return item;\n      })\n    );\n\n    updateData(items);\n    updateFetched(true);\n    updateAddress(addr);\n    updateTotalPrice(sumPrice.toPrecision(3));\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  return (\n    <div className=\"profileClass\" style={{ \"min-height\": \"100vh\" }}>\n      <Navbar></Navbar>\n      <div className=\"profileClass\">\n        <div className=\"flex flex-col place-items-center mt-20\">\n          <div className=\"wallet-address\">\n            <h2 className=\"font-bold \">Wallet Address</h2>\n            {address}\n          </div>\n        </div>\n        <div className=\"flex flex-row text-center justify-center mt-10 md:text-2xl text-white\">\n          <div className=\"wallet-nfts\">\n            <h2 className=\"font-bold\">No. of NFTs</h2>\n            {data.length}\n          </div>\n          <div className=\"wallet-nfts\">\n            <h2 className=\"font-bold\">Total Value</h2>\n            {totalPrice} ETH\n          </div>\n        </div>\n        <div className=\"flex flex-col text-center items-center mt-11 text-white\">\n          <h4 class=\"text-2xl font-bold dark:text-white\">Your NFTs</h4>\n          <div className=\"flex justify-center flex-wrap max-w-screen-xl mt-11\">\n            {data.map((value, index) => {\n              return <NFTTile data={value} key={index}></NFTTile>;\n            })}\n          </div>\n          <div className=\"mt-10 text-xl\">\n            {data.length === 0\n              ? \"Oops, No NFT data to display (Are you logged in?)\"\n              : \"\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\NFTpage.js",["148","149"],[],"import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport \"./NFTpage.css\";\n\nexport default function NFTPage(props) {\n  const [data, updateData] = useState({});\n  const [dataFetched, updateDataFetched] = useState(false);\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n    //create an NFT Token\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description,\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\");\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(\n        MarketplaceJSON.address,\n        MarketplaceJSON.abi,\n        signer\n      );\n      const salePrice = ethers.utils.parseUnits(data.price, \"ether\");\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");\n      //run the executeSale function\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice,\n      });\n      await transaction.wait();\n\n      alert(\"You successfully bought the NFT!\");\n      updateMessage(\"\");\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  if (typeof data.image == \"string\")\n    data.image = GetIpfsUrlFromPinata(data.image);\n\n  return (\n    // <div style={{ \"min-height\": \"100vh\" }}>\n    //   <Navbar></Navbar>\n    //   <div className=\"flex ml-20 mt-20\">\n    //     <img src={data.image} alt=\"\" className=\"w-2/5\" />\n    //     <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n    //       <div>Name: {data.name}</div>\n    //       <div>Description: {data.description}</div>\n    //       <div>\n    //         Price: <span className=\"\">{data.price + \" ETH\"}</span>\n    //       </div>\n    //       <div>\n    //         Owner: <span className=\"text-sm\">{data.owner}</span>\n    //       </div>\n    //       <div>\n    //         Seller: <span className=\"text-sm\">{data.seller}</span>\n    //       </div>\n    //       <div>\n    //         {currAddress != data.owner && currAddress != data.seller ? (\n    //           <button\n    //             className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\n    //             onClick={() => buyNFT(tokenId)}\n    //           >\n    //             Buy this NFT\n    //           </button>\n    //         ) : (\n    //           <div className=\"text-emerald-700\">\n    //             You are the owner of this NFT\n    //           </div>\n    //         )}\n\n    //         <div className=\"text-green text-center mt-3\">{message}</div>\n    //       </div>\n    //     </div>\n    //   </div>\n    // </div>\n    <div style={{ \"min-height\": \"100vh\" }}>\n      <html lang=\"en\" className=\"nftpagebg\">\n        <head>\n          <title>Harvest vase</title>\n          <link\n            href=\"https://fonts.googleapis.com/css?family=Bentham|Playfair+Display|Raleway:400,500|Suranna|Trocchi\"\n            rel=\"stylesheet\"\n          />\n        </head>\n\n        <body>\n          <Navbar></Navbar>\n          <div className=\"wrapper\">\n            <div className=\"product-img\">\n              <img src={data.image} alt=\"\" height=\"327\" width=\"327\" />\n              <div className=\"product-text\">\n                <h3> PRICE : {data.price + \" ETH\"}</h3>\n              </div>\n            </div>\n            <div className=\"product-info\">\n              <div className=\"product-text\">\n                <h1>{data.name}</h1>\n                <h2> {data.description}</h2>\n                <p>\n                  <div className=\"address\">\n                    <h4>\n                      Owner :\n                      <br /> {data.owner}\n                    </h4>\n                  </div>\n                  <br />\n\n                  <div class=\"address\">\n                    <h4>\n                      Seller :\n                      <br /> {data.seller}\n                    </h4>\n                  </div>\n\n                  <br />\n                  <div className=\"text-green text-center mt-3\">{message}</div>\n                </p>\n              </div>\n              <div>\n                <div className=\"product-price-btn\">\n                  {currAddress !== data.owner && currAddress !== data.seller ? (\n                    <button onClick={() => buyNFT(tokenId)}>\n                      Buy this NFT\n                    </button>\n                  ) : (\n                    <button>You owe this NFT</button>\n                  )}\n                </div>\n              </div>\n            </div>\n          </div>\n        </body>\n      </html>\n    </div>\n  );\n}\n","D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\Marketplace.js",[],[],"D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\SellNFT.js",["150"],[],"import Navbar from \"./Navbar\";\nimport { useState } from \"react\";\nimport { uploadFileToIPFS, uploadJSONToIPFS } from \"../pinata\";\nimport Marketplace from \"../Marketplace.json\";\nimport { useLocation } from \"react-router\";\n\nexport default function SellNFT() {\n  const [formParams, updateFormParams] = useState({\n    name: \"\",\n    description: \"\",\n    price: \"\",\n  });\n  const [fileURL, setFileURL] = useState(null);\n  const ethers = require(\"ethers\");\n  const [message, updateMessage] = useState(\"\");\n  const location = useLocation();\n\n  async function disableButton() {\n    const listButton = document.getElementById(\"list-button\");\n    listButton.disabled = true;\n    listButton.style.backgroundColor = \"grey\";\n    listButton.style.opacity = 0.3;\n  }\n\n  async function enableButton() {\n    const listButton = document.getElementById(\"list-button\");\n    listButton.disabled = false;\n    listButton.style.backgroundColor = \"#A500FF\";\n    listButton.style.opacity = 1;\n  }\n\n  //This function uploads the NFT image to IPFS\n  async function OnChangeFile(e) {\n    var file = e.target.files[0];\n    //check for file extension\n    try {\n      //upload the file to IPFS\n      disableButton();\n      updateMessage(\"Uploading image.. please dont click anything!\");\n      const response = await uploadFileToIPFS(file);\n      if (response.success === true) {\n        enableButton();\n        updateMessage(\"\");\n        console.log(\"Uploaded image to Pinata: \", response.pinataURL);\n        setFileURL(response.pinataURL);\n      }\n    } catch (e) {\n      console.log(\"Error during file upload\", e);\n    }\n  }\n\n  //This function uploads the metadata to IPFS\n  async function uploadMetadataToIPFS() {\n    const { name, description, price } = formParams;\n    //Make sure that none of the fields are empty\n    if (!name || !description || !price || !fileURL) {\n      updateMessage(\"Please fill all the fields!\");\n      return -1;\n    }\n\n    const nftJSON = {\n      name,\n      description,\n      price,\n      image: fileURL,\n    };\n\n    try {\n      //upload the metadata JSON to IPFS\n      const response = await uploadJSONToIPFS(nftJSON);\n      if (response.success === true) {\n        console.log(\"Uploaded JSON to Pinata: \", response);\n        return response.pinataURL;\n      }\n    } catch (e) {\n      console.log(\"error uploading JSON metadata:\", e);\n    }\n  }\n\n  async function listNFT(e) {\n    e.preventDefault();\n\n    //Upload data to IPFS\n    try {\n      const metadataURL = await uploadMetadataToIPFS();\n      if (metadataURL === -1) return;\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n      disableButton();\n      updateMessage(\n        \"Uploading NFT(takes 5 mins).. please dont click anything!\"\n      );\n\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(\n        Marketplace.address,\n        Marketplace.abi,\n        signer\n      );\n\n      //massage the params to be sent to the create NFT request\n      const price = ethers.utils.parseUnits(formParams.price, \"ether\");\n      let listingPrice = await contract.getListPrice();\n      listingPrice = listingPrice.toString();\n\n      //actually create the NFT\n      let transaction = await contract.createToken(metadataURL, price, {\n        value: listingPrice,\n      });\n      await transaction.wait();\n\n      alert(\"Successfully listed your NFT!\");\n      enableButton();\n      updateMessage(\"\");\n      updateFormParams({ name: \"\", description: \"\", price: \"\" });\n      window.location.replace(\"/\");\n    } catch (e) {\n      alert(\"Upload error\" + e);\n    }\n  }\n\n  console.log(\"Working\", process.env);\n  return (\n    <div className=\"\">\n      <Navbar></Navbar>\n      <div className=\"flex flex-col place-items-center mt-10\" id=\"nftForm\">\n        <form className=\"bg-white shadow-md rounded px-8 pt-4 pb-8 mb-4\">\n          <h3 className=\"text-center font-bold text-purple-500 mb-8\">\n            Upload your NFT to the marketplace\n          </h3>\n          <div className=\"mb-4\">\n            <label\n              className=\"block text-purple-500 text-sm font-bold mb-2\"\n              htmlFor=\"name\"\n            >\n              NFT Name\n            </label>\n            <input\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              id=\"name\"\n              type=\"text\"\n              placeholder=\"MyNFT#123\"\n              onChange={(e) =>\n                updateFormParams({ ...formParams, name: e.target.value })\n              }\n              value={formParams.name}\n            ></input>\n          </div>\n          <div className=\"mb-2\">\n            <label\n              className=\"block text-purple-500 text-sm font-bold mb-2\"\n              htmlFor=\"description\"\n            >\n              NFT Description\n            </label>\n            <textarea\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              cols=\"40\"\n              rows=\"2\"\n              id=\"description\"\n              type=\"text\"\n              placeholder=\"My Infinity Collection\"\n              value={formParams.description}\n              onChange={(e) =>\n                updateFormParams({ ...formParams, description: e.target.value })\n              }\n            ></textarea>\n          </div>\n          <div className=\"mb-6\">\n            <label\n              className=\"block text-purple-500 text-sm font-bold mb-1\"\n              htmlFor=\"price\"\n            >\n              Price (in ETH)\n            </label>\n            <input\n              className=\"shadow appearance-none border rounded w-full py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline\"\n              type=\"number\"\n              placeholder=\"Min 0.01 ETH\"\n              step=\"0.01\"\n              value={formParams.price}\n              onChange={(e) =>\n                updateFormParams({ ...formParams, price: e.target.value })\n              }\n            ></input>\n          </div>\n          <div>\n            <label\n              className=\"block text-purple-500 text-sm font-bold mb-2\"\n              htmlFor=\"image\"\n            >\n              Upload Image (&lt;500 KB & Ratio 1:1)\n            </label>\n            <input type={\"file\"} onChange={OnChangeFile}></input>\n          </div>\n          <br></br>\n          <div className=\"text-red-500 text-center\">{message}</div>\n          <button\n            onClick={listNFT}\n            className=\"font-bold mt-10 w-full bg-purple-500 text-white rounded p-2 shadow-lg\"\n            id=\"list-button\"\n          >\n            List NFT\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n",[],"D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\Navbar.js",["151","152","153","154","155","156","157","158","159","160"],[],"import logo from \"../logo_3.png\";\nimport fullLogo from \"../full_logo.png\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useParams,\n} from \"react-router-dom\";\nimport { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\n\nimport React from \"react\";\nimport \"./navbar.css\";\n\nfunction Navbar() {\n  const [Mobile, setMobile] = useState(false);\n\n  const [connected, toggleConnect] = useState(false);\n  const location = useLocation();\n  const [currAddress, updateAddress] = useState(\"0x\");\n\n  async function getAddress() {\n    const ethers = require(\"ethers\");\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    updateAddress(addr);\n  }\n\n  function updateButton() {\n    const ethereumButton = document.querySelector(\".enableEthereumButton\");\n    if (currAddress === \"0x\") {\n      ethereumButton.textContent = \"Not Connected...\";\n    } else {\n      ethereumButton.textContent =\n        \"Connected to \" + currAddress.substring(0, 15) + \"...\";\n    }\n  }\n\n  async function connectWebsite() {\n    const chainId = await window.ethereum.request({ method: \"eth_chainId\" });\n    if (chainId !== \"0x13881\") {\n      //alert('Incorrect network! Switch your metamask network to Rinkeby');\n      await window.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: \"0x13881\" }],\n      });\n    }\n    await window.ethereum\n      .request({ method: \"eth_requestAccounts\" })\n      .then(() => {\n        updateButton();\n        console.log(\"here\");\n\n        getAddress();\n        window.location.replace(location.pathname);\n      });\n  }\n\n  useEffect(() => {\n    if (window.ethereum === undefined) return;\n    let val = 1;\n    if (val) {\n      console.log(\"here\");\n      getAddress();\n      toggleConnect(val);\n      updateButton();\n    }\n\n    window.ethereum.on(\"accountsChanged\", function (accounts) {\n      window.location.replace(location.pathname);\n    });\n  });\n\n  return (\n    <>\n      <nav className=\"navbar\">\n        <h2 className=\"mb-1 text-xl font-extrabold text-gray-900 dark:text-white \">\n          <span class=\"text-transparent bg-clip-text bg-gradient-to-r to-emerald-600 from-sky-400\">\n            ApnaMarket.NFT\n          </span>\n        </h2>\n        {/*\n        if large screen ma xa bhane Mobile add huxa\n        if mobile screen ma xa bhane nav-links-mobile add huxa\n        */}\n        <ul\n          className={Mobile ? \"nav-links-mobile\" : \"nav-links\"}\n          onClick={() => setMobile(false)}\n        >\n          <NavLink\n            to=\"/\"\n            className={({ isActive }) =>\n              isActive\n                ? \"bg-purple-700 rounded-3xl text-white \"\n                : \"text-slate-300 rounded-3xl \"\n            }\n          >\n            <li>Marketplace</li>\n          </NavLink>\n          <NavLink\n            to=\"/SellNFT\"\n            className={({ isActive }) =>\n              isActive\n                ? \"bg-purple-700 rounded-3xl text-white \"\n                : \"text-slate-300 rounded-3xl \"\n            }\n          >\n            <li>Sell My NFT</li>\n          </NavLink>\n          <NavLink\n            to=\"/Profile\"\n            className={({ isActive }) =>\n              isActive\n                ? \"bg-purple-700 rounded-3xl text-white \"\n                : \"text-slate-300 rounded-3xl \"\n            }\n          >\n            <li>Profile</li>\n          </NavLink>\n\n          <button className=\"enableEthereumButton\" onClick={connectWebsite}>\n            Connect Wallet\n          </button>\n        </ul>\n\n        {/* \n        whenever we click on button = setMobile(!Mobile) ==  is mobile oppsite to setMobile \n        */}\n      </nav>\n      {/* <div className=\"text-white text-bold text-right mr-10 text-sm\">\n        {currAddress !== \"0x\" ? \"Connected to\" : \"Not Connected...\"}{\" \"}\n        {currAddress !== \"0x\" ? currAddress.substring(0, 15) + \"...\" : \"\"}\n      </div> */}\n    </>\n  );\n}\n\nexport default Navbar;\n","D:\\nftMkt\\NFTMarketplaceReact2\\src\\pinata.js",[],[],"D:\\nftMkt\\NFTMarketplaceReact2\\src\\utils.js",[],[],"D:\\nftMkt\\NFTMarketplaceReact2\\src\\components\\NFTTile.js",["161","162","163","164","165"],[],"import { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport \"./NFTTitle.css\";\n\nfunction NFTTile(data) {\n  const newTo = {\n    pathname: \"/nftPage/\" + data.data.tokenId,\n  };\n\n  const IPFSUrl = GetIpfsUrlFromPinata(data.data.image);\n\n  return (\n    //   <div className=\"border-2 ml-12 mt-5 mb-12 flex flex-col items-center rounded-lg w-48 md:w-72 shadow-2xl\">\n    //     <img\n    //       src={IPFSUrl}\n    //       alt=\"\"\n    //       className=\"w-72 h-80 rounded-lg object-cover\"\n    //       crossOrigin=\"anonymous\"\n    //     />\n    //     <div className=\"text-white w-full p-2 bg-gradient-to-t from-[#454545] to-transparent rounded-lg pt-5 -mt-20\">\n    //       <strong className=\"text-xl\">{data.data.name}</strong>\n    //       <p className=\"display-inline\">{data.data.description}</p>\n    //     </div>\n    //   </div>\n    <div className=\"grid-item\">\n      <div className=\"item-style\">\n        <div className=\"thumb\">\n          <Link to={newTo}>\n            <img src={IPFSUrl} alt=\"\" />\n          </Link>\n          <button className=\"reaction-btn\">\n            <i className=\"ri-heart-fill\"></i>\n\n            <span>NFT</span>\n          </button>\n        </div>\n\n        <div className=\"content\">\n          <h3 className=\"title\">\n            <a href=\"#\">\n              <strong>{data.data.name}</strong>\n            </a>\n          </h3>\n\n          <div className=\"profile d-flex-center\">\n            <i className=\"ri-shield-check-fill\"></i>\n          </div>\n\n          <div className=\"product-owner d-flex-center\">\n            <span className=\"bid-owner\">{data.data.description}</span>\n            <span className=\"biding-price d-flex-between\">\n              <i className=\"ri-arrow-up-line\"></i>\n            </span>\n          </div>\n\n          <div className=\"product-buy d-flex-between\">\n            <a href=\"#\" className=\"btn\">\n              <span>\n                <i className=\"ri-time-line\"></i>{\" \"}\n                <strong className=\"text-slate-100\">\n                  {data.data.price} ETH\n                </strong>\n              </span>\n            </a>\n            <a href=\"#\" className=\"btn btn-cart btn-outline\">\n              <Link to={newTo}>\n                <a>Buy</a>\n              </Link>\n            </a>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default NFTTile;\n",{"ruleId":"166","severity":1,"message":"167","line":4,"column":8,"nodeType":"168","messageId":"169","endLine":4,"endColumn":11},{"ruleId":"166","severity":1,"message":"170","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":14},{"ruleId":"166","severity":1,"message":"171","line":7,"column":8,"nodeType":"168","messageId":"169","endLine":7,"endColumn":16},{"ruleId":"166","severity":1,"message":"172","line":9,"column":3,"nodeType":"168","messageId":"169","endLine":9,"endColumn":16},{"ruleId":"166","severity":1,"message":"173","line":16,"column":9,"nodeType":"168","messageId":"169","endLine":16,"endColumn":17},{"ruleId":"166","severity":1,"message":"174","line":2,"column":10,"nodeType":"168","messageId":"169","endLine":2,"endColumn":21},{"ruleId":"166","severity":1,"message":"175","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":12},{"ruleId":"166","severity":1,"message":"174","line":3,"column":10,"nodeType":"168","messageId":"169","endLine":3,"endColumn":21},{"ruleId":"176","severity":1,"message":"177","line":103,"column":26,"nodeType":"178","messageId":"179","endLine":103,"endColumn":28},{"ruleId":"176","severity":1,"message":"177","line":103,"column":55,"nodeType":"178","messageId":"179","endLine":103,"endColumn":57},{"ruleId":"166","severity":1,"message":"180","line":1,"column":8,"nodeType":"168","messageId":"169","endLine":1,"endColumn":12},{"ruleId":"166","severity":1,"message":"181","line":4,"column":20,"nodeType":"168","messageId":"169","endLine":4,"endColumn":26},{"ruleId":"166","severity":1,"message":"182","line":5,"column":3,"nodeType":"168","messageId":"169","endLine":5,"endColumn":9},{"ruleId":"166","severity":1,"message":"183","line":6,"column":3,"nodeType":"168","messageId":"169","endLine":6,"endColumn":8},{"ruleId":"166","severity":1,"message":"184","line":8,"column":3,"nodeType":"168","messageId":"169","endLine":8,"endColumn":16},{"ruleId":"166","severity":1,"message":"185","line":9,"column":3,"nodeType":"168","messageId":"169","endLine":9,"endColumn":12},{"ruleId":"186","severity":1,"message":"187","line":55,"column":3,"nodeType":"168","endLine":55,"endColumn":12,"suggestions":"188"},{"ruleId":"176","severity":1,"message":"189","line":56,"column":25,"nodeType":"178","messageId":"179","endLine":56,"endColumn":27},{"ruleId":"166","severity":1,"message":"175","line":1,"column":8,"nodeType":"168","messageId":"169","endLine":1,"endColumn":12},{"ruleId":"166","severity":1,"message":"181","line":2,"column":27,"nodeType":"168","messageId":"169","endLine":2,"endColumn":33},{"ruleId":"166","severity":1,"message":"167","line":4,"column":8,"nodeType":"168","messageId":"169","endLine":4,"endColumn":11},{"ruleId":"166","severity":1,"message":"170","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":14},{"ruleId":"166","severity":1,"message":"171","line":7,"column":8,"nodeType":"168","messageId":"169","endLine":7,"endColumn":16},{"ruleId":"166","severity":1,"message":"172","line":9,"column":3,"nodeType":"168","messageId":"169","endLine":9,"endColumn":16},{"ruleId":"166","severity":1,"message":"174","line":4,"column":10,"nodeType":"168","messageId":"169","endLine":4,"endColumn":21},{"ruleId":"166","severity":1,"message":"175","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":12},{"ruleId":"166","severity":1,"message":"174","line":3,"column":10,"nodeType":"168","messageId":"169","endLine":3,"endColumn":21},{"ruleId":"166","severity":1,"message":"173","line":16,"column":9,"nodeType":"168","messageId":"169","endLine":16,"endColumn":17},{"ruleId":"166","severity":1,"message":"180","line":1,"column":8,"nodeType":"168","messageId":"169","endLine":1,"endColumn":12},{"ruleId":"166","severity":1,"message":"190","line":2,"column":8,"nodeType":"168","messageId":"169","endLine":2,"endColumn":16},{"ruleId":"166","severity":1,"message":"181","line":4,"column":20,"nodeType":"168","messageId":"169","endLine":4,"endColumn":26},{"ruleId":"166","severity":1,"message":"182","line":5,"column":3,"nodeType":"168","messageId":"169","endLine":5,"endColumn":9},{"ruleId":"166","severity":1,"message":"183","line":6,"column":3,"nodeType":"168","messageId":"169","endLine":6,"endColumn":8},{"ruleId":"166","severity":1,"message":"191","line":7,"column":3,"nodeType":"168","messageId":"169","endLine":7,"endColumn":7},{"ruleId":"166","severity":1,"message":"184","line":8,"column":3,"nodeType":"168","messageId":"169","endLine":8,"endColumn":16},{"ruleId":"166","severity":1,"message":"185","line":9,"column":3,"nodeType":"168","messageId":"169","endLine":9,"endColumn":12},{"ruleId":"166","severity":1,"message":"192","line":21,"column":10,"nodeType":"168","messageId":"169","endLine":21,"endColumn":19},{"ruleId":"186","severity":1,"message":"193","line":63,"column":3,"nodeType":"168","endLine":63,"endColumn":12,"suggestions":"194"},{"ruleId":"166","severity":1,"message":"181","line":1,"column":27,"nodeType":"168","messageId":"169","endLine":1,"endColumn":33},{"ruleId":"195","severity":1,"message":"196","line":40,"column":13,"nodeType":"197","endLine":40,"endColumn":25},{"ruleId":"195","severity":1,"message":"196","line":57,"column":13,"nodeType":"197","endLine":57,"endColumn":41},{"ruleId":"195","severity":1,"message":"196","line":65,"column":13,"nodeType":"197","endLine":65,"endColumn":62},{"ruleId":"195","severity":1,"message":"198","line":67,"column":17,"nodeType":"197","endLine":67,"endColumn":20},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","'Navbar' is defined but never used.","'ReactDOM' is defined but never used.","'BrowserRouter' is defined but never used.","'location' is assigned a value but never used.","'useLocation' is defined but never used.","'axie' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'logo' is defined but never used.","'Router' is defined but never used.","'Switch' is defined but never used.","'Route' is defined but never used.","'useRouteMatch' is defined but never used.","'useParams' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'toggleConnect'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [location.pathname] as a second argument to the useEffect Hook.",["199"],"Expected '===' and instead saw '=='.","'fullLogo' is defined but never used.","'Link' is defined but never used.","'connected' is assigned a value but never used.","React Hook useEffect contains a call to 'toggleConnect'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [updateButton, location.pathname] as a second argument to the useEffect Hook.",["200"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md",{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},"Add dependencies array: [location.pathname]",{"range":"205","text":"206"},"Add dependencies array: [updateButton, location.pathname]",{"range":"207","text":"208"},[2025,2025],", [location.pathname]",[2095,2095],", [updateButton, location.pathname]"]