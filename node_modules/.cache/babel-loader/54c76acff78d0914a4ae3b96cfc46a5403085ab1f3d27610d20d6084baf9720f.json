{"ast":null,"code":"var _jsxFileName = \"D:\\\\nftMkt\\\\NFTMarketplaceReact2\\\\src\\\\components\\\\NFTpage.js\",\n  _s = $RefreshSig$();\nimport Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NFTPage(props) {\n  _s();\n  const [data, updateData] = useState({});\n  const [dataFetched, updateDataFetched] = useState(false);\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n    //create an NFT Token\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\");\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(MarketplaceJSON.address, MarketplaceJSON.abi, signer);\n      const salePrice = ethers.utils.parseUnits(data.price, \"ether\");\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");\n      //run the executeSale function\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice\n      });\n      await transaction.wait();\n      alert(\"You successfully bought the NFT!\");\n      updateMessage(\"\");\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  if (typeof data.image == \"string\") data.image = GetIpfsUrlFromPinata(data.image);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      \"min-height\": \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex ml-20 mt-20\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: data.image,\n        alt: \"\",\n        className: \"w-2/5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Name: \", data.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Description: \", data.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Price: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"\",\n            children: data.price + \" ETH\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Owner: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.owner\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 20\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Seller: \", /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-sm\",\n            children: data.seller\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [currAddress != data.owner && currAddress != data.seller ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\",\n            onClick: () => buyNFT(tokenId),\n            children: \"Buy this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-emerald-700\",\n            children: \"You are the owner of this NFT\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-green text-center mt-3\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(NFTPage, \"tHfbAfnHJAVQy91bdK1UPtClOpY=\", false, function () {\n  return [useParams];\n});\n_c = NFTPage;\nvar _c;\n$RefreshReg$(_c, \"NFTPage\");","map":{"version":3,"names":["Navbar","axie","useLocation","useParams","MarketplaceJSON","axios","useState","GetIpfsUrlFromPinata","jsxDEV","_jsxDEV","NFTPage","props","_s","data","updateData","dataFetched","updateDataFetched","message","updateMessage","currAddress","updateCurrAddress","getNFTData","tokenId","ethers","require","provider","providers","Web3Provider","window","ethereum","signer","getSigner","addr","getAddress","contract","Contract","address","abi","tokenURI","listedToken","getListedTokenForId","meta","get","console","log","item","price","seller","owner","image","name","description","buyNFT","salePrice","utils","parseUnits","transaction","executeSale","value","wait","alert","e","params","style","children","fileName","_jsxFileName","lineNumber","columnNumber","className","src","alt","onClick","_c","$RefreshReg$"],"sources":["D:/nftMkt/NFTMarketplaceReact2/src/components/NFTpage.js"],"sourcesContent":["import Navbar from \"./Navbar\";\nimport axie from \"../tile.jpeg\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport MarketplaceJSON from \"../Marketplace.json\";\nimport axios from \"axios\";\nimport { useState } from \"react\";\nimport { GetIpfsUrlFromPinata } from \"../utils\";\n\nexport default function NFTPage(props) {\n  const [data, updateData] = useState({});\n  const [dataFetched, updateDataFetched] = useState(false);\n  const [message, updateMessage] = useState(\"\");\n  const [currAddress, updateCurrAddress] = useState(\"0x\");\n\n  async function getNFTData(tokenId) {\n    const ethers = require(\"ethers\");\n    //After adding your Hardhat network to your metamask, this code will get providers and signers\n    const provider = new ethers.providers.Web3Provider(window.ethereum);\n    const signer = provider.getSigner();\n    const addr = await signer.getAddress();\n    //Pull the deployed contract instance\n    let contract = new ethers.Contract(\n      MarketplaceJSON.address,\n      MarketplaceJSON.abi,\n      signer\n    );\n    //create an NFT Token\n    var tokenURI = await contract.tokenURI(tokenId);\n    const listedToken = await contract.getListedTokenForId(tokenId);\n    tokenURI = GetIpfsUrlFromPinata(tokenURI);\n    let meta = await axios.get(tokenURI);\n    meta = meta.data;\n    console.log(listedToken);\n\n    let item = {\n      price: meta.price,\n      tokenId: tokenId,\n      seller: listedToken.seller,\n      owner: listedToken.owner,\n      image: meta.image,\n      name: meta.name,\n      description: meta.description,\n    };\n    console.log(item);\n    updateData(item);\n    updateDataFetched(true);\n    console.log(\"address\", addr);\n    updateCurrAddress(addr);\n  }\n\n  async function buyNFT(tokenId) {\n    try {\n      const ethers = require(\"ethers\");\n      //After adding your Hardhat network to your metamask, this code will get providers and signers\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n\n      //Pull the deployed contract instance\n      let contract = new ethers.Contract(\n        MarketplaceJSON.address,\n        MarketplaceJSON.abi,\n        signer\n      );\n      const salePrice = ethers.utils.parseUnits(data.price, \"ether\");\n      updateMessage(\"Buying the NFT... Please Wait (Upto 5 mins)\");\n      //run the executeSale function\n      let transaction = await contract.executeSale(tokenId, {\n        value: salePrice,\n      });\n      await transaction.wait();\n\n      alert(\"You successfully bought the NFT!\");\n      updateMessage(\"\");\n    } catch (e) {\n      alert(\"Upload Error\" + e);\n    }\n  }\n\n  const params = useParams();\n  const tokenId = params.tokenId;\n  if (!dataFetched) getNFTData(tokenId);\n  if (typeof data.image == \"string\")\n    data.image = GetIpfsUrlFromPinata(data.image);\n\n  return (\n    <div style={{ \"min-height\": \"100vh\" }}>\n      <Navbar></Navbar>\n      <div className=\"flex ml-20 mt-20\">\n        <img src={data.image} alt=\"\" className=\"w-2/5\" />\n        <div className=\"text-xl ml-20 space-y-8 text-white shadow-2xl rounded-lg border-2 p-5\">\n          <div>Name: {data.name}</div>\n          <div>Description: {data.description}</div>\n          <div>\n            Price: <span className=\"\">{data.price + \" ETH\"}</span>\n          </div>\n          <div>\n            Owner: <span className=\"text-sm\">{data.owner}</span>\n          </div>\n          <div>\n            Seller: <span className=\"text-sm\">{data.seller}</span>\n          </div>\n          <div>\n            {currAddress != data.owner && currAddress != data.seller ? (\n              <button\n                className=\"enableEthereumButton bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded text-sm\"\n                onClick={() => buyNFT(tokenId)}\n              >\n                Buy this NFT\n              </button>\n            ) : (\n              <div className=\"text-emerald-700\">\n                You are the owner of this NFT\n              </div>\n            )}\n\n            <div className=\"text-green text-center mt-3\">{message}</div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}