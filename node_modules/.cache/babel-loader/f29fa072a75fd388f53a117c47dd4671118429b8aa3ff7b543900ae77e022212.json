{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n  if (value == null) {\n    return null;\n  }\n  // These *are* the droids we're looking for.\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n    const data = isHexString(value.data) ? value.data : null;\n    if (!requireData || data) {\n      return {\n        message: value.message,\n        data\n      };\n    }\n  }\n  // Spelunk further...\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunk(value[key], requireData);\n      if (result) {\n        return result;\n      }\n    }\n    return null;\n  }\n  // Might be a JSON string we can further descend...\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value), requireData);\n    } catch (error) {}\n  }\n  return null;\n}\nfunction checkError(method, error, params) {\n  const transaction = params.transaction || params.signedTransaction;\n  // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n  if (method === \"call\") {\n    const result = spelunk(error, true);\n    if (result) {\n      return result.data;\n    }\n    // Nothing descriptive..\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      data: \"0x\",\n      transaction,\n      error\n    });\n  }\n  if (method === \"estimateGas\") {\n    // Try to find something, with a preference on SERVER_ERROR body\n    let result = spelunk(error.body, false);\n    if (result == null) {\n      result = spelunk(error, false);\n    }\n    // Found \"reverted\", this is a CALL_EXCEPTION\n    if (result) {\n      logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        reason: result.message,\n        method,\n        transaction,\n        error\n      });\n    }\n  }\n  // @TODO: Should we spelunk for message too?\n  let message = error.message;\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n  message = (message || \"\").toLowerCase();\n  // \"insufficient funds for gas * price + value + cost(data)\"\n  if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"nonce too low\"\n  if (message.match(/nonce (is )?too low/i)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  }\n  // \"replacement transaction underpriced\"\n  if (message.match(/only replay-protected/i)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error,\n      method,\n      transaction\n    });\n  }\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n  throw error;\n}\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n  return payload.result;\n}\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    super();\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n    defineReadOnly(this, \"provider\", provider);\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n      return address;\n    });\n    // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n    if (transaction.to != null) {\n      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {\n        if (to == null) {\n          return null;\n        }\n        const address = yield this.provider.resolveName(to);\n        if (address == null) {\n          logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n        }\n        return address;\n      }));\n    }\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(_ref => {\n      let {\n        tx,\n        sender\n      } = _ref;\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n            action: \"sendTransaction\",\n            transaction: tx\n          });\n        }\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // This cannot be mined any earlier than any recent block\n      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n      // Send the transaction\n      const hash = yield this.sendUncheckedTransaction(transaction);\n      try {\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n          const tx = yield this.provider.getTransaction(hash);\n          if (tx === null) {\n            return undefined;\n          }\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        }), {\n          oncePoll: this.provider\n        });\n      } catch (error) {\n        error.transactionHash = hash;\n        throw error;\n      }\n    });\n  }\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      try {\n        return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"signMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n        throw error;\n      }\n    });\n  }\n  _legacySignMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n      try {\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_legacySignMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n        throw error;\n      }\n    });\n  }\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n      try {\n        return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_signTypedData\",\n            from: address,\n            messageData: {\n              domain: populated.domain,\n              types,\n              value: populated.value\n            }\n          });\n        }\n        throw error;\n      }\n    });\n  }\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n}\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    let networkOrReady = network;\n    // The network is unknown, query the JSON-RPC for it\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n    super(networkOrReady);\n    // Default URL\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n    this._nextId = 42;\n  }\n  get _cache() {\n    if (this._eventLoopCache == null) {\n      this._eventLoopCache = {};\n    }\n    return this._eventLoopCache;\n  }\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n  detectNetwork() {\n    if (!this._cache[\"detectNetwork\"]) {\n      this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n      // Clear this cache at the beginning of the next event loop\n      setTimeout(() => {\n        this._cache[\"detectNetwork\"] = null;\n      }, 0);\n    }\n    return this._cache[\"detectNetwork\"];\n  }\n  _uncachedDetectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    });\n    // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n    const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    });\n    // Cache the fetch, but clear it on the next event loop\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        this._cache[method] = null;\n      }, 0);\n    }\n    return result;\n  }\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n        return null;\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n        return [\"eth_getLogs\", [params.filter]];\n      default:\n        break;\n    }\n    return null;\n  }\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Legacy networks do not like the type field being passed along (which\n      // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n      if (method === \"call\" || method === \"estimateGas\") {\n        const tx = params.transaction;\n        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n          // If there are no EIP-1559 properties, it might be non-EIP-1559\n          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n            const feeData = yield this.getFeeData();\n            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n              // Network doesn't know about EIP-1559 (and hence type)\n              params = shallowCopy(params);\n              params.transaction = shallowCopy(tx);\n              delete params.transaction.type;\n            }\n          }\n        }\n      }\n      const args = this.prepareRequest(method, params);\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n    super._startEvent(event);\n  }\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n    super._stopEvent(event);\n  }\n  // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n    checkProperties(transaction, allowed);\n    const result = {};\n    // JSON-RPC now requires numeric values to be \"quantity\" values\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n      const value = hexValue(BigNumber.from(transaction[key]));\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n      result[key] = hexlify(transaction[key]);\n    });\n    if (transaction.accessList) {\n      result[\"accessList\"] = accessListify(transaction.accessList);\n    }\n    return result;\n  }\n}","map":{"version":3,"names":["Signer","BigNumber","hexlify","hexValue","hexZeroPad","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","value","requireData","message","match","data","key","result","JSON","parse","error","checkError","method","params","transaction","signedTransaction","throwError","errors","CALL_EXCEPTION","body","UNPREDICTABLE_GAS_LIMIT","reason","code","SERVER_ERROR","responseText","toLowerCase","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","timer","timeout","Promise","resolve","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructor","constructorGuard","provider","addressOrIndex","formatter","address","throwArgumentError","connect","operation","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","getAddress","send","then","accounts","length","sendUncheckedTransaction","fromAddress","gasLimit","estimate","from","estimateGas","to","__awaiter","resolveName","tx","sender","_ref","hexTx","hexlifyTransaction","hash","ACTION_REJECTED","action","signTransaction","sendTransaction","blockNumber","_getInternalBlockNumber","pollingInterval","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","signMessage","messageData","_legacySignMessage","_signTypedData","domain","types","populated","resolveNames","name","stringify","getPayload","unlock","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","reject","detectNetwork","Object","freeze","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","getUncheckedSigner","listAccounts","map","a","request","id","jsonrpc","emit","cache","connection","response","prepareRequest","blockTag","position","includeTransactions","blockHash","filter","perform","isZero","feeData","getFeeData","args","NOT_IMPLEMENTED","_startEvent","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","_stopEvent","listenerCount","allowExtra","allowed"],"sources":["D:\\nftMkt\\RTW3-Week7-NFT-Marketplace\\node_modules\\@ethersproject\\providers\\src.ts\\json-rpc-provider.ts"],"sourcesContent":["\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction spelunk(value: any, requireData: boolean): null | { message: string, data: null | string } {\n    if (value == null) { return null; }\n\n    // These *are* the droids we're looking for.\n    if (typeof(value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data: null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n\n    // Spelunk further...\n    if (typeof(value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) { return result; }\n        }\n        return null;\n    }\n\n    // Might be a JSON string we can further descend...\n    if (typeof(value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        } catch (error) { }\n    }\n\n    return null;\n}\n\nfunction checkError(method: string, error: any, params: any): any {\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) { return result.data; }\n\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) { result = spelunk(error, false); }\n\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n\n    // @TODO: Should we spelunk for message too?\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n        try {\n            return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"signMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        try {\n            // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n            return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_legacySignMessage\",\n                    from: address,\n                    messageData: message\n                });\n            }\n            throw error;\n        }\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        try {\n            return await this.provider.send(\"eth_signTypedData_v4\", [\n                address.toLowerCase(),\n                JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n            ]);\n        } catch (error) {\n            if (typeof(error.message) === \"string\" && error.message.match(/user denied/i)) {\n                logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                    action: \"_signTypedData\",\n                    from: address,\n                    messageData: { domain: populated.domain, types, value: populated.value }\n                });\n            }\n            throw error;\n        }\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-1559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue(BigNumber.from((<any>transaction)[key]));\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}