{"ast":null,"code":"//require('dotenv').config();\nconst key = \"e41afc27e286d4deeb3c\";\nconst secret = \"f111ffd0a1ae4c089819821f640d5e1f7dd78de85bcf3a09bb45cb0a430f7c60\";\nconst axios = require(\"axios\");\nconst FormData = require(\"form-data\");\nexport const uploadJSONToIPFS = async JSONBody => {\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\n  //making axios POST request to Pinata ⬇️\n  return axios.post(url, JSONBody, {\n    headers: {\n      pinata_api_key: key,\n      pinata_secret_api_key: secret\n    }\n  }).then(function (response) {\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};\nexport const uploadFileToIPFS = async file => {\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\n  //making axios POST request to Pinata ⬇️\n\n  let data = new FormData();\n  data.append(\"file\", file);\n  const metadata = JSON.stringify({\n    name: \"testname\",\n    keyvalues: {\n      exampleKey: \"exampleValue\"\n    }\n  });\n  data.append(\"pinataMetadata\", metadata);\n\n  //pinataOptions are optional\n  const pinataOptions = JSON.stringify({\n    cidVersion: 0,\n    customPinPolicy: {\n      regions: [{\n        id: \"FRA1\",\n        desiredReplicationCount: 1\n      }, {\n        id: \"NYC1\",\n        desiredReplicationCount: 2\n      }]\n    }\n  });\n  data.append(\"pinataOptions\", pinataOptions);\n  return axios.post(url, data, {\n    maxBodyLength: \"Infinity\",\n    headers: {\n      \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\n      pinata_api_key: key,\n      pinata_secret_api_key: secret\n    }\n  }).then(function (response) {\n    console.log(\"image uploaded\", response.data.IpfsHash);\n    return {\n      success: true,\n      pinataURL: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\n    };\n  }).catch(function (error) {\n    console.log(error);\n    return {\n      success: false,\n      message: error.message\n    };\n  });\n};","map":{"version":3,"names":["key","secret","axios","require","FormData","uploadJSONToIPFS","JSONBody","url","post","headers","pinata_api_key","pinata_secret_api_key","then","response","success","pinataURL","data","IpfsHash","catch","error","console","log","message","uploadFileToIPFS","file","append","metadata","JSON","stringify","name","keyvalues","exampleKey","pinataOptions","cidVersion","customPinPolicy","regions","id","desiredReplicationCount","maxBodyLength","_boundary"],"sources":["D:/nftMkt/NFTMarketplaceReact2/src/pinata.js"],"sourcesContent":["//require('dotenv').config();\r\nconst key = \"e41afc27e286d4deeb3c\";\r\nconst secret =\r\n  \"f111ffd0a1ae4c089819821f640d5e1f7dd78de85bcf3a09bb45cb0a430f7c60\";\r\n\r\nconst axios = require(\"axios\");\r\nconst FormData = require(\"form-data\");\r\n\r\nexport const uploadJSONToIPFS = async (JSONBody) => {\r\n  const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n  //making axios POST request to Pinata ⬇️\r\n  return axios\r\n    .post(url, JSONBody, {\r\n      headers: {\r\n        pinata_api_key: key,\r\n        pinata_secret_api_key: secret,\r\n      },\r\n    })\r\n    .then(function (response) {\r\n      return {\r\n        success: true,\r\n        pinataURL:\r\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\r\n      };\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n      };\r\n    });\r\n};\r\n\r\nexport const uploadFileToIPFS = async (file) => {\r\n  const url = `https://api.pinata.cloud/pinning/pinFileToIPFS`;\r\n  //making axios POST request to Pinata ⬇️\r\n\r\n  let data = new FormData();\r\n  data.append(\"file\", file);\r\n\r\n  const metadata = JSON.stringify({\r\n    name: \"testname\",\r\n    keyvalues: {\r\n      exampleKey: \"exampleValue\",\r\n    },\r\n  });\r\n  data.append(\"pinataMetadata\", metadata);\r\n\r\n  //pinataOptions are optional\r\n  const pinataOptions = JSON.stringify({\r\n    cidVersion: 0,\r\n    customPinPolicy: {\r\n      regions: [\r\n        {\r\n          id: \"FRA1\",\r\n          desiredReplicationCount: 1,\r\n        },\r\n        {\r\n          id: \"NYC1\",\r\n          desiredReplicationCount: 2,\r\n        },\r\n      ],\r\n    },\r\n  });\r\n  data.append(\"pinataOptions\", pinataOptions);\r\n\r\n  return axios\r\n    .post(url, data, {\r\n      maxBodyLength: \"Infinity\",\r\n      headers: {\r\n        \"Content-Type\": `multipart/form-data; boundary=${data._boundary}`,\r\n        pinata_api_key: key,\r\n        pinata_secret_api_key: secret,\r\n      },\r\n    })\r\n    .then(function (response) {\r\n      console.log(\"image uploaded\", response.data.IpfsHash);\r\n      return {\r\n        success: true,\r\n        pinataURL:\r\n          \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash,\r\n      };\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n      return {\r\n        success: false,\r\n        message: error.message,\r\n      };\r\n    });\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,GAAG,GAAG,sBAAsB;AAClC,MAAMC,MAAM,GACV,kEAAkE;AAEpE,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAC9B,MAAMC,QAAQ,GAAGD,OAAO,CAAC,WAAW,CAAC;AAErC,OAAO,MAAME,gBAAgB,GAAG,MAAOC,QAAQ,IAAK;EAClD,MAAMC,GAAG,GAAI,gDAA+C;EAC5D;EACA,OAAOL,KAAK,CACTM,IAAI,CAACD,GAAG,EAAED,QAAQ,EAAE;IACnBG,OAAO,EAAE;MACPC,cAAc,EAAEV,GAAG;MACnBW,qBAAqB,EAAEV;IACzB;EACF,CAAC,CAAC,CACDW,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACxB,OAAO;MACLC,OAAO,EAAE,IAAI;MACbC,SAAS,EACP,oCAAoC,GAAGF,QAAQ,CAACG,IAAI,CAACC;IACzD,CAAC;EACH,CAAC,CAAC,CACDC,KAAK,CAAC,UAAUC,KAAK,EAAE;IACtBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO;MACLL,OAAO,EAAE,KAAK;MACdQ,OAAO,EAAEH,KAAK,CAACG;IACjB,CAAC;EACH,CAAC,CAAC;AACN,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,MAAMjB,GAAG,GAAI,gDAA+C;EAC5D;;EAEA,IAAIS,IAAI,GAAG,IAAIZ,QAAQ,CAAC,CAAC;EACzBY,IAAI,CAACS,MAAM,CAAC,MAAM,EAAED,IAAI,CAAC;EAEzB,MAAME,QAAQ,GAAGC,IAAI,CAACC,SAAS,CAAC;IAC9BC,IAAI,EAAE,UAAU;IAChBC,SAAS,EAAE;MACTC,UAAU,EAAE;IACd;EACF,CAAC,CAAC;EACFf,IAAI,CAACS,MAAM,CAAC,gBAAgB,EAAEC,QAAQ,CAAC;;EAEvC;EACA,MAAMM,aAAa,GAAGL,IAAI,CAACC,SAAS,CAAC;IACnCK,UAAU,EAAE,CAAC;IACbC,eAAe,EAAE;MACfC,OAAO,EAAE,CACP;QACEC,EAAE,EAAE,MAAM;QACVC,uBAAuB,EAAE;MAC3B,CAAC,EACD;QACED,EAAE,EAAE,MAAM;QACVC,uBAAuB,EAAE;MAC3B,CAAC;IAEL;EACF,CAAC,CAAC;EACFrB,IAAI,CAACS,MAAM,CAAC,eAAe,EAAEO,aAAa,CAAC;EAE3C,OAAO9B,KAAK,CACTM,IAAI,CAACD,GAAG,EAAES,IAAI,EAAE;IACfsB,aAAa,EAAE,UAAU;IACzB7B,OAAO,EAAE;MACP,cAAc,EAAG,iCAAgCO,IAAI,CAACuB,SAAU,EAAC;MACjE7B,cAAc,EAAEV,GAAG;MACnBW,qBAAqB,EAAEV;IACzB;EACF,CAAC,CAAC,CACDW,IAAI,CAAC,UAAUC,QAAQ,EAAE;IACxBO,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAER,QAAQ,CAACG,IAAI,CAACC,QAAQ,CAAC;IACrD,OAAO;MACLH,OAAO,EAAE,IAAI;MACbC,SAAS,EACP,oCAAoC,GAAGF,QAAQ,CAACG,IAAI,CAACC;IACzD,CAAC;EACH,CAAC,CAAC,CACDC,KAAK,CAAC,UAAUC,KAAK,EAAE;IACtBC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;IAClB,OAAO;MACLL,OAAO,EAAE,KAAK;MACdQ,OAAO,EAAEH,KAAK,CAACG;IACjB,CAAC;EACH,CAAC,CAAC;AACN,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}